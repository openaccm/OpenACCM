<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data>

        <!-- scatter -->
        <record id="mana_dashboard.template_simple_scatter" model="mana_dashboard.template">
            <field name="name">Simple Scatter</field>
            <field name="category">chart</field>
            <field name="type">scatter chart</field>
            <field name="component_type">scatter_chart</field>
            <field name="preview" type="base64" file="mana_dashboard/static/previews/scatter/simple_scatter.png" />
            <field name="has_styles">False</field>
            <field name="has_template">False</field>
            <field name="supported_result_types" eval="[(6, 0, [ref('mana_dashboard_base.result_type_standard')])]"/>
            <field name="scripts">
<![CDATA[

let data_source = this.get_data_source(0)
let measures = data_source.get_measures()
if (measures.length == 0) {
  return
}

// generate the series, you can change option here
//  https://echarts.apache.org/en/option.html#series-scatter
let series = []
if (measures.length == 1) {
  series.push({
      data: data_source.get_col_values(measures[0]),
      type: 'scatter',
      name: measures[0],
  })
} else if (measures.length == 2) {
  series.push({
      data: data_source.get_cols_values([measures[0], measures[1]]),
      type: 'scatter',
      name: measures[0] + ' vs ' + measures[1],
  })
} else {
  // cartesian product
  let data = []
  for (let i = 0; i < measures.length; i++) {
    for (let j = i + 1; j < measures.length; j++) {
      data.push(data_source.get_cols_values([measures[i], measures[j]]))
      series.push({
          data: data_source.get_cols_values([measures[i], measures[j]]),
          type: 'scatter',
          name: measures[i] + ' vs ' + measures[j],
      })
    }
  }
}

// you can change the option details here
let option = {
  xAxis: {},
  yAxis: {},
  series: []
};
option.series = series;

// set the option, the chart will be rendered
this.setOption(option);

]]>
            </field>
        </record>

        <!-- scatter bubble  -->
        <record id="mana_dashboard.template_bubble_scatter" model="mana_dashboard.template">
            <field name="name">Bubble Scatter</field>
            <field name="category">chart</field>
            <field name="type">scatter chart</field>
            <field name="component_type">scatter_chart</field>
            <field name="preview" type="base64" file="mana_dashboard/static/previews/scatter/scatter_bubble.png" />
            <field name="has_styles">False</field>
            <field name="has_template">False</field>
            <field name="supported_result_types" eval="[(6, 0, [ref('mana_dashboard_base.result_type_standard')])]"/>
            <field name="scripts">
<![CDATA[

// let the data source name as the legend name
let config = this.get_config()
let legend_data = []
let series = []
let data_sources = this.get_data_sources()
if (data_sources.length == 0) {
  return
}

for (let i = 0; i < data_sources.length; i++) {
  let data_source = data_sources[i]
  let measures = data_source.get_measures()
  if (measures.length == 0) {
    continue
  }
  legend_data.push(data_source.name)
  let category = data_source.get_categories()
  if (category.length == 0) {
    continue
  }
  let demensions = [category[0]].concat(measures)
  let data = data_source.get_cols_values(demensions)

  let serie = {
      name: data_source.name,
      data: data,
      type: 'scatter',
      symbolSize: function (data) {
        return Math.sqrt(data[2]) / 5e2;
      },
      emphasis: {
        focus: 'series',
        label: {
          show: true,
          formatter: function (param) {
            return param.data[0];
          },
          position: 'top'
        }
      },
      itemStyle: {
        shadowBlur: 10,
        shadowColor: 'rgba(120, 36, 50, 0.5)',
        shadowOffsetY: 5,
        color: new echarts.graphic.RadialGradient(0.4, 0.3, 1, [
          {
            offset: 0,
            color: 'rgb(251, 118, 123)'
          },
          {
            offset: 1,
            color: 'rgb(204, 46, 72)'
          }
        ])
      }
    }
  series.push(serie)
}

let option = {
  backgroundColor: new echarts.graphic.RadialGradient(0.3, 0.3, 0.8, [
    {
      offset: 0,
      color: '#f7f8fa'
    },
    {
      offset: 1,
      color: '#cdd0d5'
    }
  ]),
  title: {
    text: config.title,
    left: '5%',
    top: '3%'
  },
  legend: {
    right: '10%',
    top: '3%',
    data: legend_data
  },
  grid: {
    left: '8%',
    top: '10%'
  },
  xAxis: {
    splitLine: {
      lineStyle: {
        type: 'dashed'
      }
    }
  },
  yAxis: {
    splitLine: {
      lineStyle: {
        type: 'dashed'
      }
    },
    scale: true
  },
  series: series
};

// set the option, the chart will be rendered
this.setOption(option)
]]>
            </field>

            <!-- default script -->
            <field name="default_scripts">
<![CDATA[
const data = [
  [
    [28604, 77, 17096869, 'Australia', 1990],
    [31163, 77.4, 27662440, 'Canada', 1990],
    [1516, 68, 1154605773, 'China', 1990],
    [13670, 74.7, 10582082, 'Cuba', 1990],
    [28599, 75, 4986705, 'Finland', 1990],
    [29476, 77.1, 56943299, 'France', 1990],
    [31476, 75.4, 78958237, 'Germany', 1990],
    [28666, 78.1, 254830, 'Iceland', 1990],
    [1777, 57.7, 870601776, 'India', 1990],
    [29550, 79.1, 122249285, 'Japan', 1990],
    [2076, 67.9, 20194354, 'North Korea', 1990],
    [12087, 72, 42972254, 'South Korea', 1990],
    [24021, 75.4, 3397534, 'New Zealand', 1990],
    [43296, 76.8, 4240375, 'Norway', 1990],
    [10088, 70.8, 38195258, 'Poland', 1990],
    [19349, 69.6, 147568552, 'Russia', 1990],
    [10670, 67.3, 53994605, 'Turkey', 1990],
    [26424, 75.7, 57110117, 'United Kingdom', 1990],
    [37062, 75.4, 252847810, 'United States', 1990]
  ]
];
let option = {
  backgroundColor: new echarts.graphic.RadialGradient(0.3, 0.3, 0.8, [
    {
      offset: 0,
      color: '#f7f8fa'
    },
    {
      offset: 1,
      color: '#cdd0d5'
    }
  ]),
  title: {
    text: 'Life Expectancy and GDP by Country',
    left: '5%',
    top: '3%'
  },
  legend: {
    right: '10%',
    top: '3%',
    data: ['1990', '2015']
  },
  grid: {
    left: '8%',
    top: '10%'
  },
  xAxis: {
    splitLine: {
      lineStyle: {
        type: 'dashed'
      }
    }
  },
  yAxis: {
    splitLine: {
      lineStyle: {
        type: 'dashed'
      }
    },
    scale: true
  },
  series: [
    {
      name: '1990',
      data: data[0],
      type: 'scatter',
      symbolSize: function (data) {
        return Math.sqrt(data[2]) / 5e2;
      },
      emphasis: {
        focus: 'series',
        label: {
          show: true,
          formatter: function (param) {
            return param.data[3];
          },
          position: 'top'
        }
      },
      itemStyle: {
        shadowBlur: 10,
        shadowColor: 'rgba(120, 36, 50, 0.5)',
        shadowOffsetY: 5,
        color: new echarts.graphic.RadialGradient(0.4, 0.3, 1, [
          {
            offset: 0,
            color: 'rgb(251, 118, 123)'
          },
          {
            offset: 1,
            color: 'rgb(204, 46, 72)'
          }
        ])
      }
    },
    {
      name: '2015',
      data: data[1],
      type: 'scatter',
      symbolSize: function (data) {
        return Math.sqrt(data[2]) / 5e2;
      },
      emphasis: {
        focus: 'series',
        label: {
          show: true,
          formatter: function (param) {
            return param.data[3];
          },
          position: 'top'
        }
      },
      itemStyle: {
        shadowBlur: 10,
        shadowColor: 'rgba(25, 100, 150, 0.5)',
        shadowOffsetY: 5,
        color: new echarts.graphic.RadialGradient(0.4, 0.3, 1, [
          {
            offset: 0,
            color: 'rgb(129, 227, 238)'
          },
          {
            offset: 1,
            color: 'rgb(25, 183, 207)'
          }
        ])
      }
    }
  ]
};
this.setOption(option);
]]>
            </field>
            <!-- help -->
            <field name="help">
<![CDATA[
<p>To use this template, you need to choose one category and four measures.</p>
  [
    [44056, 81.8, 23968973, 'Australia', 2015],
    [43294, 81.7, 35939927, 'Canada', 2015],
    [13334, 76.9, 1376048943, 'China', 2015],
    [21291, 78.5, 11389562, 'Cuba', 2015],
    [38923, 80.8, 5503457, 'Finland', 2015],
    [37599, 81.9, 64395345, 'France', 2015],
    [44053, 81.1, 80688545, 'Germany', 2015],
    [42182, 82.8, 329425, 'Iceland', 2015],
    [5903, 66.8, 1311050527, 'India', 2015],
    [36162, 83.5, 126573481, 'Japan', 2015],
    [1390, 71.4, 25155317, 'North Korea', 2015],
    [34644, 80.7, 50293439, 'South Korea', 2015],
    [34186, 80.6, 4528526, 'New Zealand', 2015],
    [64304, 81.6, 5210967, 'Norway', 2015],
    [24787, 77.3, 38611794, 'Poland', 2015],
    [23038, 73.13, 143456918, 'Russia', 2015],
    [19360, 76.5, 78665830, 'Turkey', 2015],
    [38225, 81.4, 64715810, 'United Kingdom', 2015],
    [53354, 79.1, 321773631, 'United States', 2015]
  ]
]]>
            </field>
        </record>

    </data>
</odoo>